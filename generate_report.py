import json
import os
import base64
import matplotlib.pyplot as plt
from io import BytesIO

# Sample results creation function (if 'results.json' is missing)
def create_sample_results_file():
    sample_data = [
        {
            "elements": [
                {
                    "name": "Test Scenario 1",
                    "steps": [
                        {
                            "name": "Step 1",
                            "result": {"status": "passed", "duration": 120}
                        },
                        {
                            "name": "Step 2",
                            "result": {"status": "failed", "duration": 100}
                        }
                    ],
                    "duration": 250
                }
            ]
        },
        {
            "elements": [
                {
                    "name": "Test Scenario 2",
                    "steps": [
                        {
                            "name": "Step 1",
                            "result": {"status": "skipped", "duration": 0}
                        },
                        {
                            "name": "Step 2",
                            "result": {"status": "passed", "duration": 150}
                        }
                    ],
                    "duration": 200
                }
            ]
        }
    ]

    with open("results.json", "w") as json_file:
        json.dump(sample_data, json_file)
    print("Sample 'results.json' file created.")

# Ensure 'results.json' exists
if not os.path.exists("results.json"):
    print("Error: 'results.json' file is missing. Creating a sample results file.")
    create_sample_results_file()

# Load the JSON results
with open("results.json", "r") as json_file:
    results = json.load(json_file)

def generate_graph(passed, failed, skipped):
    # Create a bar chart for passed, failed, and skipped tests
    labels = ['Passed', 'Failed', 'Skipped']
    values = [passed, failed, skipped]

    fig, ax = plt.subplots()
    ax.bar(labels, values, color=['green', 'red', 'gray'])
    
    ax.set_ylabel('Number of Tests')
    ax.set_title('Test Results')

    # Save the graph as an image in a BytesIO object to encode as base64
    img_buf = BytesIO()
    plt.savefig(img_buf, format='png')
    img_buf.seek(0)

    # Get the base64 encoding of the image
    img_base64 = base64.b64encode(img_buf.read()).decode('utf-8')

    # Print base64 for debugging
    print(f"Base64 Image: {img_base64[:100]}...")  # Print only the first 100 characters for brevity

    return f"data:image/png;base64,{img_base64}"

def generate_report():
    # Check if 'results.json' exists
    if not os.path.exists("results.json"):
        print("Error: 'results.json' file is missing. Creating a sample results file.")
        create_sample_results_file()
        return

    # Load the JSON results generated by Behave
    with open("results.json", "r") as json_file:
        results = json.load(json_file)

    # Initialize counters for passed, failed, and skipped tests
    passed = 0
    failed = 0
    skipped = 0
    scenarios = []

    # Process the results and generate test data
    for feature in results:
        for scenario in feature['elements']:
            scenario_name = scenario['name']
            status = 'passed'  # Default to 'passed' initially
            duration = scenario.get('duration', 0)

            # If 'duration' is missing at the scenario level, calculate from steps
            if duration == 0:  # Scenario does not have 'duration'
                duration = sum(step['result']['duration'] for step in scenario.get('steps', []))

            # Flags for step statuses
            scenario_failed = False
            scenario_skipped = False

            # Process each step within the scenario
            for step in scenario.get('steps', []):
                step_status = 'undefined'  # Default to 'undefined' if no result is found

                # Check if 'result' key exists
                if 'result' in step:
                    if step['result']['status'] == 'passed':
                        step_status = 'passed'
                    elif step['result']['status'] == 'failed':
                        step_status = 'failed'
                        scenario_failed = True  # Mark the scenario as failed if any step fails
                    elif step['result']['status'] == 'skipped':
                        step_status = 'skipped'
                        scenario_skipped = True  # Mark the scenario as skipped if any step is skipped
                else:
                    step_status = 'skipped'  # If no result is found, treat it as skipped

            # Determine the final scenario status based on step statuses
            if scenario_failed:
                status = 'failed'
            elif scenario_skipped:
                status = 'skipped'

            # Add the scenario details to the report data
            scenarios.append({
                "name": scenario_name,
                "status": status.capitalize(),  # Capitalize first letter of status
                "duration": str(duration) + " ms" if duration != 0 else "N/A",
            })

            # Update the counters based on the final status of the scenario
            if status == 'passed':
                passed += 1
            elif status == 'failed':
                failed += 1
            elif status == 'skipped':
                skipped += 1

    # Generate the HTML report using the template
    try:
        with open("report_template.html", "r") as template_file:
            template_content = template_file.read()
    except FileNotFoundError:
        print("Error: 'report_template.html' file is missing.")
        return

    report_data = {
        "total_scenarios": passed + failed + skipped,
        "passed": passed,
        "failed": failed,
        "skipped": skipped,
        "scenarios": scenarios,
        "graph_image": generate_graph(passed, failed, skipped)
    }

    # Replace placeholders with actual data
    html_report = template_content.replace("{{ total_scenarios }}", str(report_data["total_scenarios"])) \
                                   .replace("{{ passed }}", str(report_data["passed"])) \
                                   .replace("{{ failed }}", str(report_data["failed"])) \
                                   .replace("{{ skipped }}", str(report_data["skipped"]))

    # Replace the graph placeholder with the base64 encoded image
    html_report = html_report.replace("{{ graph_image }}", report_data["graph_image"])

    # Generate rows for each scenario
    scenarios_html = ""
    for scenario in report_data["scenarios"]:
        scenarios_html += f'<tr class="result-{scenario["status"].lower()}">' \
                          f'<td>{scenario["name"]}</td>' \
                          f'<td>{scenario["status"]}</td>' \
                          f'<td>{scenario["duration"]}</td>' \
                          '</tr>'

    html_report = html_report.replace("{{ content }}", scenarios_html)

    # Save the generated HTML report
    with open("report.html", "w") as report_file:
        report_file.write(html_report)

    print("Report generated successfully: report.html")

if __name__ == "__main__":
    generate_report()
